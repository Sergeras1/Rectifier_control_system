
Rectifier_control_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c28  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002dd4  08002dd4  00003dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dec  08002dec  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002df4  08002df4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df4  08002df4  00003df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002df8  08002df8  00003df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002dfc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000e8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007dd1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bac  00000000  00000000  0000be0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0000d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002319d  00000000  00000000  0000e5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009406  00000000  00000000  00031742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8676  00000000  00000000  0003ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001131be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019d0  00000000  00000000  00113204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  00114bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002dbc 	.word	0x08002dbc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002dbc 	.word	0x08002dbc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Error_Handler>:
ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
DMA_HandleTypeDef hdma_adc1;
ADC_HandleTypeDef hadc1;

void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  __disable_irq();
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <Error_Handler+0x8>

08000524 <MX_ADC1_Init>:
  {
  }
}

void MX_ADC1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8000536:	4b3b      	ldr	r3, [pc, #236]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000538:	4a3b      	ldr	r2, [pc, #236]	@ (8000628 <MX_ADC1_Init+0x104>)
 800053a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800053c:	4b39      	ldr	r3, [pc, #228]	@ (8000624 <MX_ADC1_Init+0x100>)
 800053e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000542:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000544:	4b37      	ldr	r3, [pc, #220]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800054a:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <MX_ADC1_Init+0x100>)
 800054c:	2201      	movs	r2, #1
 800054e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000550:	4b34      	ldr	r3, [pc, #208]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000552:	2201      	movs	r2, #1
 8000554:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000556:	4b33      	ldr	r3, [pc, #204]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800055e:	4b31      	ldr	r3, [pc, #196]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000560:	2200      	movs	r2, #0
 8000562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000564:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000566:	4a31      	ldr	r2, [pc, #196]	@ (800062c <MX_ADC1_Init+0x108>)
 8000568:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056a:	4b2e      	ldr	r3, [pc, #184]	@ (8000624 <MX_ADC1_Init+0x100>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000570:	4b2c      	ldr	r3, [pc, #176]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000572:	2203      	movs	r2, #3
 8000574:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000578:	2201      	movs	r2, #1
 800057a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800057e:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000584:	4827      	ldr	r0, [pc, #156]	@ (8000624 <MX_ADC1_Init+0x100>)
 8000586:	f000 fb95 	bl	8000cb4 <HAL_ADC_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000590:	f7ff ffc2 	bl	8000518 <Error_Handler>
  }

  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_ADC1_Init+0x10c>)
 8000596:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800059a:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.HighThreshold = 2200;
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <MX_ADC1_Init+0x10c>)
 800059e:	f640 0298 	movw	r2, #2200	@ 0x898
 80005a2:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.LowThreshold = 2390;
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <MX_ADC1_Init+0x10c>)
 80005a6:	f640 1256 	movw	r2, #2390	@ 0x956
 80005aa:	609a      	str	r2, [r3, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_ADC1_Init+0x10c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	741a      	strb	r2, [r3, #16]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80005b2:	491f      	ldr	r1, [pc, #124]	@ (8000630 <MX_ADC1_Init+0x10c>)
 80005b4:	481b      	ldr	r0, [pc, #108]	@ (8000624 <MX_ADC1_Init+0x100>)
 80005b6:	f000 ff31 	bl	800141c <HAL_ADC_AnalogWDGConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005c0:	f7ff ffaa 	bl	8000518 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005c8:	2301      	movs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4619      	mov	r1, r3
 80005d4:	4813      	ldr	r0, [pc, #76]	@ (8000624 <MX_ADC1_Init+0x100>)
 80005d6:	f000 fdef 	bl	80011b8 <HAL_ADC_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80005e0:	f7ff ff9a 	bl	8000518 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <MX_ADC1_Init+0x100>)
 80005f2:	f000 fde1 	bl	80011b8 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80005fc:	f7ff ff8c 	bl	8000518 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_2;
 8000600:	2302      	movs	r3, #2
 8000602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_ADC1_Init+0x100>)
 800060e:	f000 fdd3 	bl	80011b8 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000618:	f7ff ff7e 	bl	8000518 <Error_Handler>
  }

}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000a8 	.word	0x200000a8
 8000628:	40012000 	.word	0x40012000
 800062c:	0f000001 	.word	0x0f000001
 8000630:	20000030 	.word	0x20000030

08000634 <checkChanelns>:

void checkChanelns(uint16_t* valueADC_ch, uint16_t size){
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < size; ++i) {
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e05a      	b.n	80006fc <checkChanelns+0xc8>
		if (valueADC_ch[i] >= AnalogWDGConfig.HighThreshold) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <checkChanelns+0xdc>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	429a      	cmp	r2, r3
 8000658:	d321      	bcc.n	800069e <checkChanelns+0x6a>
			switch(i) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d017      	beq.n	8000690 <checkChanelns+0x5c>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b02      	cmp	r3, #2
 8000664:	dc47      	bgt.n	80006f6 <checkChanelns+0xc2>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d003      	beq.n	8000674 <checkChanelns+0x40>
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d007      	beq.n	8000682 <checkChanelns+0x4e>
 8000672:	e040      	b.n	80006f6 <checkChanelns+0xc2>
			case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067a:	4826      	ldr	r0, [pc, #152]	@ (8000714 <checkChanelns+0xe0>)
 800067c:	f001 fee4 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 8000680:	e039      	b.n	80006f6 <checkChanelns+0xc2>
			case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000688:	4822      	ldr	r0, [pc, #136]	@ (8000714 <checkChanelns+0xe0>)
 800068a:	f001 fedd 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 800068e:	e032      	b.n	80006f6 <checkChanelns+0xc2>
			case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000696:	4820      	ldr	r0, [pc, #128]	@ (8000718 <checkChanelns+0xe4>)
 8000698:	f001 fed6 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 800069c:	e02b      	b.n	80006f6 <checkChanelns+0xc2>
			}
		}
		else if (valueADC_ch[i] <= AnalogWDGConfig.LowThreshold) {
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <checkChanelns+0xdc>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d821      	bhi.n	80006f6 <checkChanelns+0xc2>
			switch(i) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d017      	beq.n	80006e8 <checkChanelns+0xb4>
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	dc1b      	bgt.n	80006f6 <checkChanelns+0xc2>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <checkChanelns+0x98>
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d007      	beq.n	80006da <checkChanelns+0xa6>
 80006ca:	e014      	b.n	80006f6 <checkChanelns+0xc2>
			case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d2:	4810      	ldr	r0, [pc, #64]	@ (8000714 <checkChanelns+0xe0>)
 80006d4:	f001 feb8 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 80006d8:	e00d      	b.n	80006f6 <checkChanelns+0xc2>
			case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <checkChanelns+0xe0>)
 80006e2:	f001 feb1 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 80006e6:	e006      	b.n	80006f6 <checkChanelns+0xc2>
			case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ee:	480a      	ldr	r0, [pc, #40]	@ (8000718 <checkChanelns+0xe4>)
 80006f0:	f001 feaa 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 80006f4:	bf00      	nop
	for (int i = 0; i < size; ++i) {
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	dba0      	blt.n	8000646 <checkChanelns+0x12>
			}
		}
	}
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000030 	.word	0x20000030
 8000714:	40020000 	.word	0x40020000
 8000718:	40020400 	.word	0x40020400

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fa56 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f812 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f000 f8a0 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 800072c:	f000 f87e 	bl	800082c <MX_DMA_Init>
  MX_ADC1_Init();
 8000730:	f7ff fef8 	bl	8000524 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&valueADC_ch, ADC_CHANNELS_NUM);
 8000734:	2203      	movs	r2, #3
 8000736:	4903      	ldr	r1, [pc, #12]	@ (8000744 <main+0x28>)
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <main+0x2c>)
 800073a:	f000 fc0f 	bl	8000f5c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073e:	bf00      	nop
 8000740:	e7fd      	b.n	800073e <main+0x22>
 8000742:	bf00      	nop
 8000744:	20000028 	.word	0x20000028
 8000748:	200000a8 	.word	0x200000a8

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	@ 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fb02 	bl	8002d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <SystemClock_Config+0xd8>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <SystemClock_Config+0xd8>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <SystemClock_Config+0xd8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <SystemClock_Config+0xdc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a24      	ldr	r2, [pc, #144]	@ (8000828 <SystemClock_Config+0xdc>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <SystemClock_Config+0xdc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007bc:	2308      	movs	r3, #8
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007c0:	23b4      	movs	r3, #180	@ 0xb4
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fea3 	bl	800251c <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f7ff fe9c 	bl	8000518 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e0:	f001 fe4c 	bl	800247c <HAL_PWREx_EnableOverDrive>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007ea:	f7ff fe95 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2105      	movs	r1, #5
 800080c:	4618      	mov	r0, r3
 800080e:	f002 f8fd 	bl	8002a0c <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000818:	f7ff fe7e 	bl	8000518 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_DMA_Init+0x3c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <MX_DMA_Init+0x3c>)
 800083c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_DMA_Init+0x3c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2038      	movs	r0, #56	@ 0x38
 8000854:	f001 f8a5 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000858:	2038      	movs	r0, #56	@ 0x38
 800085a:	f001 f8be 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b2b      	ldr	r3, [pc, #172]	@ (8000934 <MX_GPIO_Init+0xc8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a2a      	ldr	r2, [pc, #168]	@ (8000934 <MX_GPIO_Init+0xc8>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <MX_GPIO_Init+0xc8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_GPIO_Init+0xc8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <MX_GPIO_Init+0xc8>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_GPIO_Init+0xc8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_GPIO_Init+0xc8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <MX_GPIO_Init+0xc8>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_GPIO_Init+0xc8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008dc:	4816      	ldr	r0, [pc, #88]	@ (8000938 <MX_GPIO_Init+0xcc>)
 80008de:	f001 fdb3 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80008e8:	4814      	ldr	r0, [pc, #80]	@ (800093c <MX_GPIO_Init+0xd0>)
 80008ea:	f001 fdad 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	@ (8000938 <MX_GPIO_Init+0xcc>)
 8000908:	f001 fbf2 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800090c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000916:	2302      	movs	r3, #2
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_GPIO_Init+0xd0>)
 8000926:	f001 fbe3 	bl	80020f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400
 800093c:	40020000 	.word	0x40020000

08000940 <HAL_ADC_LevelOutOfWindowCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1 && __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD)) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a0b      	ldr	r2, [pc, #44]	@ (8000978 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d10f      	bne.n	8000970 <HAL_ADC_LevelOutOfWindowCallback+0x30>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	2b01      	cmp	r3, #1
 800095c:	d108      	bne.n	8000970 <HAL_ADC_LevelOutOfWindowCallback+0x30>
    	checkChanelns(valueADC_ch, ADC_CHANNELS_NUM);
 800095e:	2103      	movs	r1, #3
 8000960:	4806      	ldr	r0, [pc, #24]	@ (800097c <HAL_ADC_LevelOutOfWindowCallback+0x3c>)
 8000962:	f7ff fe67 	bl	8000634 <checkChanelns>
            __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f06f 0201 	mvn.w	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
    }
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000a8 	.word	0x200000a8
 800097c:	20000028 	.word	0x20000028

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a33      	ldr	r2, [pc, #204]	@ (8000abc <HAL_ADC_MspInit+0xec>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d15f      	bne.n	8000ab2 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b32      	ldr	r3, [pc, #200]	@ (8000ac0 <HAL_ADC_MspInit+0xf0>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a31      	ldr	r2, [pc, #196]	@ (8000ac0 <HAL_ADC_MspInit+0xf0>)
 80009fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <HAL_ADC_MspInit+0xf0>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <HAL_ADC_MspInit+0xf0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac0 <HAL_ADC_MspInit+0xf0>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <HAL_ADC_MspInit+0xf0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4821      	ldr	r0, [pc, #132]	@ (8000ac4 <HAL_ADC_MspInit+0xf4>)
 8000a3e:	f001 fb57 	bl	80020f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a44:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <HAL_ADC_MspInit+0xfc>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a86:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a88:	f000 ffc2 	bl	8001a10 <HAL_DMA_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000a92:	f7ff fd41 	bl	8000518 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_ADC_MspInit+0xf8>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2012      	movs	r0, #18
 8000aa8:	f000 ff7b 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000aac:	2012      	movs	r0, #18
 8000aae:	f000 ff94 	bl	80019da <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	20000048 	.word	0x20000048
 8000acc:	40026410 	.word	0x40026410

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f8a5 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <ADC_IRQHandler+0x10>)
 8000b36:	f000 f900 	bl	8000d3a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000a8 	.word	0x200000a8

08000b44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <DMA2_Stream0_IRQHandler+0x10>)
 8000b4a:	f001 f867 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000048 	.word	0x20000048

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f002 f8e3 	bl	8002d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fdb5 	bl	800071c <main>
  bx  lr    
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc0:	08002dfc 	.word	0x08002dfc
  ldr r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc8:	200000f4 	.word	0x200000f4

08000bcc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <CAN1_RX0_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <HAL_Init+0x40>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <HAL_Init+0x40>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_Init+0x40>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fec7 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff febc 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fedf 	bl	80019f6 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 fea7 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000f0 	.word	0x200000f0

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000f0 	.word	0x200000f0

08000cb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e033      	b.n	8000d32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d109      	bne.n	8000ce6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fe7c 	bl	80009d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d118      	bne.n	8000d24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cfa:	f023 0302 	bic.w	r3, r3, #2
 8000cfe:	f043 0202 	orr.w	r2, r3, #2
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 fbe8 	bl	80014dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f023 0303 	bic.w	r3, r3, #3
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d22:	e001      	b.n	8000d28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d049      	beq.n	8000e04 <HAL_ADC_IRQHandler+0xca>
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d046      	beq.n	8000e04 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d12b      	bne.n	8000df4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d127      	bne.n	8000df4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000daa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d119      	bne.n	8000df4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0220 	bic.w	r2, r2, #32
 8000dce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f043 0201 	orr.w	r2, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f9c1 	bl	800117c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f06f 0212 	mvn.w	r2, #18
 8000e02:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e12:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d057      	beq.n	8000eca <HAL_ADC_IRQHandler+0x190>
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d054      	beq.n	8000eca <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d105      	bne.n	8000e38 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d139      	bne.n	8000eba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e4c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d12b      	bne.n	8000eba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d124      	bne.n	8000eba <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d11d      	bne.n	8000eba <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d119      	bne.n	8000eba <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e94:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 fc8c 	bl	80017d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f06f 020c 	mvn.w	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d017      	beq.n	8000f10 <HAL_ADC_IRQHandler+0x1d6>
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d014      	beq.n	8000f10 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d10d      	bne.n	8000f10 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fd1d 	bl	8000940 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f06f 0201 	mvn.w	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f1e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d015      	beq.n	8000f52 <HAL_ADC_IRQHandler+0x218>
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d012      	beq.n	8000f52 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f30:	f043 0202 	orr.w	r2, r3, #2
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f06f 0220 	mvn.w	r2, #32
 8000f40:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f92e 	bl	80011a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f06f 0220 	mvn.w	r2, #32
 8000f50:	601a      	str	r2, [r3, #0]
  }
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Start_DMA+0x1e>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e0e9      	b.n	800114e <HAL_ADC_Start_DMA+0x1f2>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d018      	beq.n	8000fc2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa0:	4b6d      	ldr	r3, [pc, #436]	@ (8001158 <HAL_ADC_Start_DMA+0x1fc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a6d      	ldr	r2, [pc, #436]	@ (800115c <HAL_ADC_Start_DMA+0x200>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	0c9a      	lsrs	r2, r3, #18
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000fb4:	e002      	b.n	8000fbc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fd0:	d107      	bne.n	8000fe2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	f040 80a1 	bne.w	8001134 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001010:	2b00      	cmp	r3, #0
 8001012:	d007      	beq.n	8001024 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800101c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800102c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001030:	d106      	bne.n	8001040 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f023 0206 	bic.w	r2, r3, #6
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	645a      	str	r2, [r3, #68]	@ 0x44
 800103e:	e002      	b.n	8001046 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800104e:	4b44      	ldr	r3, [pc, #272]	@ (8001160 <HAL_ADC_Start_DMA+0x204>)
 8001050:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001056:	4a43      	ldr	r2, [pc, #268]	@ (8001164 <HAL_ADC_Start_DMA+0x208>)
 8001058:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800105e:	4a42      	ldr	r2, [pc, #264]	@ (8001168 <HAL_ADC_Start_DMA+0x20c>)
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	4a41      	ldr	r2, [pc, #260]	@ (800116c <HAL_ADC_Start_DMA+0x210>)
 8001068:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001072:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001082:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001092:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	334c      	adds	r3, #76	@ 0x4c
 800109e:	4619      	mov	r1, r3
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f000 fd62 	bl	8001b6c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12a      	bne.n	800110a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001170 <HAL_ADC_Start_DMA+0x214>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d015      	beq.n	80010ea <HAL_ADC_Start_DMA+0x18e>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001174 <HAL_ADC_Start_DMA+0x218>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d105      	bne.n	80010d4 <HAL_ADC_Start_DMA+0x178>
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <HAL_ADC_Start_DMA+0x204>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a27      	ldr	r2, [pc, #156]	@ (8001178 <HAL_ADC_Start_DMA+0x21c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d136      	bne.n	800114c <HAL_ADC_Start_DMA+0x1f0>
 80010de:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <HAL_ADC_Start_DMA+0x204>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d130      	bne.n	800114c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d129      	bne.n	800114c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e020      	b.n	800114c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a18      	ldr	r2, [pc, #96]	@ (8001170 <HAL_ADC_Start_DMA+0x214>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d11b      	bne.n	800114c <HAL_ADC_Start_DMA+0x1f0>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d114      	bne.n	800114c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	e00b      	b.n	800114c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	f043 0210 	orr.w	r2, r3, #16
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000000 	.word	0x20000000
 800115c:	431bde83 	.word	0x431bde83
 8001160:	40012300 	.word	0x40012300
 8001164:	080016d5 	.word	0x080016d5
 8001168:	0800178f 	.word	0x0800178f
 800116c:	080017ab 	.word	0x080017ab
 8001170:	40012000 	.word	0x40012000
 8001174:	40012100 	.word	0x40012100
 8001178:	40012200 	.word	0x40012200

0800117c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1c>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e113      	b.n	80013fc <HAL_ADC_ConfigChannel+0x244>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d925      	bls.n	8001230 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68d9      	ldr	r1, [r3, #12]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	3b1e      	subs	r3, #30
 80011fa:	2207      	movs	r2, #7
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43da      	mvns	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	400a      	ands	r2, r1
 8001208:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	4603      	mov	r3, r0
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	3b1e      	subs	r3, #30
 8001224:	409a      	lsls	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	e022      	b.n	8001276 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6919      	ldr	r1, [r3, #16]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	2207      	movs	r2, #7
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6919      	ldr	r1, [r3, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	4603      	mov	r3, r0
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4403      	add	r3, r0
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b06      	cmp	r3, #6
 800127c:	d824      	bhi.n	80012c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b05      	subs	r3, #5
 8001290:	221f      	movs	r2, #31
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	400a      	ands	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b05      	subs	r3, #5
 80012ba:	fa00 f203 	lsl.w	r2, r0, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c6:	e04c      	b.n	8001362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d824      	bhi.n	800131a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b23      	subs	r3, #35	@ 0x23
 80012e2:	221f      	movs	r2, #31
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43da      	mvns	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	400a      	ands	r2, r1
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b23      	subs	r3, #35	@ 0x23
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
 8001318:	e023      	b.n	8001362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	3b41      	subs	r3, #65	@ 0x41
 800132c:	221f      	movs	r2, #31
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	400a      	ands	r2, r1
 800133a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	3b41      	subs	r3, #65	@ 0x41
 8001356:	fa00 f203 	lsl.w	r2, r0, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <HAL_ADC_ConfigChannel+0x250>)
 8001364:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a28      	ldr	r2, [pc, #160]	@ (800140c <HAL_ADC_ConfigChannel+0x254>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d10f      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d8>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b12      	cmp	r3, #18
 8001376:	d10b      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <HAL_ADC_ConfigChannel+0x254>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12b      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x23a>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1c      	ldr	r2, [pc, #112]	@ (8001410 <HAL_ADC_ConfigChannel+0x258>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d003      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x1f4>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b11      	cmp	r3, #17
 80013aa:	d122      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a11      	ldr	r2, [pc, #68]	@ (8001410 <HAL_ADC_ConfigChannel+0x258>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d111      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_ADC_ConfigChannel+0x25c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <HAL_ADC_ConfigChannel+0x260>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9a      	lsrs	r2, r3, #18
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40012300 	.word	0x40012300
 800140c:	40012000 	.word	0x40012000
 8001410:	10000012 	.word	0x10000012
 8001414:	20000000 	.word	0x20000000
 8001418:	431bde83 	.word	0x431bde83

0800141c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */

  /* Process locked */
  __HAL_LOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_AnalogWDGConfig+0x18>
 8001430:	2302      	movs	r3, #2
 8001432:	e04d      	b.n	80014d0 <HAL_ADC_AnalogWDGConfig+0xb4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (AnalogWDGConfig->ITMode == ENABLE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7c1b      	ldrb	r3, [r3, #16]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	e007      	b.n	8001466 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001464:	605a      	str	r2, [r3, #4]
  }

  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001478:	6053      	str	r3, [r2, #4]

  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]

  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	6852      	ldr	r2, [r2, #4]
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	6892      	ldr	r2, [r2, #8]
 800149e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 021f 	bic.w	r2, r2, #31
 80014ae:	605a      	str	r2, [r3, #4]

  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e4:	4b79      	ldr	r3, [pc, #484]	@ (80016cc <ADC_Init+0x1f0>)
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	021a      	lsls	r2, r3, #8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6899      	ldr	r1, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	4a58      	ldr	r2, [pc, #352]	@ (80016d0 <ADC_Init+0x1f4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d022      	beq.n	80015ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001582:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6899      	ldr	r1, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6899      	ldr	r1, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	e00f      	b.n	80015da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0202 	bic.w	r2, r2, #2
 80015e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7e1b      	ldrb	r3, [r3, #24]
 80015f4:	005a      	lsls	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01b      	beq.n	8001640 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001616:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001626:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	3b01      	subs	r3, #1
 8001634:	035a      	lsls	r2, r3, #13
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e007      	b.n	8001650 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800164e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800165e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	3b01      	subs	r3, #1
 800166c:	051a      	lsls	r2, r3, #20
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001692:	025a      	lsls	r2, r3, #9
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6899      	ldr	r1, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	029a      	lsls	r2, r3, #10
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40012300 	.word	0x40012300
 80016d0:	0f000001 	.word	0x0f000001

080016d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d13c      	bne.n	8001768 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12b      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800170c:	2b00      	cmp	r3, #0
 800170e:	d127      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001728:	2b00      	cmp	r3, #0
 800172a:	d119      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0220 	bic.w	r2, r2, #32
 800173a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fd0b 	bl	800117c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001766:	e00e      	b.n	8001786 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fd15 	bl	80011a4 <HAL_ADC_ErrorCallback>
}
 800177a:	e004      	b.n	8001786 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800179a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fcf7 	bl	8001190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2240      	movs	r2, #64	@ 0x40
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f043 0204 	orr.w	r2, r3, #4
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fcea 	bl	80011a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	@ (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	@ 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff f93e 	bl	8000c9c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e099      	b.n	8001b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e00f      	b.n	8001a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff f925 	bl	8000c9c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d908      	bls.n	8001a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e078      	b.n	8001b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e8      	bne.n	8001a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_DMA_Init+0x158>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d117      	bne.n	8001b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fa6f 	bl	8001ff8 <DMA_CheckFifoParam>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	@ 0x40
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e016      	b.n	8001b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fa26 	bl	8001f8c <DMA_CalcBaseAndBitshift>
 8001b40:	4603      	mov	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b48:	223f      	movs	r2, #63	@ 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	f010803f 	.word	0xf010803f

08001b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Start_IT+0x26>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e040      	b.n	8001c14 <HAL_DMA_Start_IT+0xa8>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d12f      	bne.n	8001c06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f9b8 	bl	8001f30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	223f      	movs	r2, #63	@ 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0216 	orr.w	r2, r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d007      	beq.n	8001bf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0208 	orr.w	r2, r2, #8
 8001bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e005      	b.n	8001c12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c28:	4b8e      	ldr	r3, [pc, #568]	@ (8001e64 <HAL_DMA_IRQHandler+0x248>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e68 <HAL_DMA_IRQHandler+0x24c>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	2208      	movs	r2, #8
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0204 	bic.w	r2, r2, #4
 8001c6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	2208      	movs	r2, #8
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d012      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	2201      	movs	r2, #1
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d043      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03c      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d16:	2210      	movs	r2, #16
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d018      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d024      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
 8001d4a:	e01f      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0208 	bic.w	r2, r2, #8
 8001d7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d90:	2220      	movs	r2, #32
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 808f 	beq.w	8001ebc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8087 	beq.w	8001ebc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	2220      	movs	r2, #32
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d136      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0216 	bic.w	r2, r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x1da>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0208 	bic.w	r2, r2, #8
 8001e04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	223f      	movs	r2, #63	@ 0x3f
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d07e      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	4798      	blx	r3
        }
        return;
 8001e32:	e079      	b.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01d      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10d      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d031      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
 8001e60:	e02c      	b.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
 8001e62:	bf00      	nop
 8001e64:	20000000 	.word	0x20000000
 8001e68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
 8001e7c:	e01e      	b.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10f      	bne.n	8001eac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0210 	bic.w	r2, r2, #16
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d032      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	3301      	adds	r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d307      	bcc.n	8001f04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f2      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x2cc>
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
 8001f26:	e000      	b.n	8001f2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f28:	bf00      	nop
    }
  }
}
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b40      	cmp	r3, #64	@ 0x40
 8001f5c:	d108      	bne.n	8001f70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f6e:	e007      	b.n	8001f80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3b10      	subs	r3, #16
 8001f9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa6:	4a13      	ldr	r2, [pc, #76]	@ (8001ff4 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d909      	bls.n	8001fce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fc2:	f023 0303 	bic.w	r3, r3, #3
 8001fc6:	1d1a      	adds	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fcc:	e007      	b.n	8001fde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	aaaaaaab 	.word	0xaaaaaaab
 8001ff4:	08002de4 	.word	0x08002de4

08001ff8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002008:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11f      	bne.n	8002052 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d856      	bhi.n	80020c6 <DMA_CheckFifoParam+0xce>
 8002018:	a201      	add	r2, pc, #4	@ (adr r2, 8002020 <DMA_CheckFifoParam+0x28>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002031 	.word	0x08002031
 8002024:	08002043 	.word	0x08002043
 8002028:	08002031 	.word	0x08002031
 800202c:	080020c7 	.word	0x080020c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d046      	beq.n	80020ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002040:	e043      	b.n	80020ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800204a:	d140      	bne.n	80020ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002050:	e03d      	b.n	80020ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800205a:	d121      	bne.n	80020a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d837      	bhi.n	80020d2 <DMA_CheckFifoParam+0xda>
 8002062:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <DMA_CheckFifoParam+0x70>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	08002079 	.word	0x08002079
 800206c:	0800207f 	.word	0x0800207f
 8002070:	08002079 	.word	0x08002079
 8002074:	08002091 	.word	0x08002091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	e030      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d025      	beq.n	80020d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208e:	e022      	b.n	80020d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002098:	d11f      	bne.n	80020da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800209e:	e01c      	b.n	80020da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d903      	bls.n	80020ae <DMA_CheckFifoParam+0xb6>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d003      	beq.n	80020b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020ac:	e018      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
      break;
 80020b2:	e015      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      break;
 80020c4:	e00b      	b.n	80020de <DMA_CheckFifoParam+0xe6>
      break;
 80020c6:	bf00      	nop
 80020c8:	e00a      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ca:	bf00      	nop
 80020cc:	e008      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
 80020d0:	e006      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e004      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e002      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80020da:	bf00      	nop
 80020dc:	e000      	b.n	80020e0 <DMA_CheckFifoParam+0xe8>
      break;
 80020de:	bf00      	nop
    }
  } 
  
  return status; 
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e177      	b.n	80023fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8166 	bne.w	80023f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80c0 	beq.w	80023f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b66      	ldr	r3, [pc, #408]	@ (8002414 <HAL_GPIO_Init+0x324>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4a65      	ldr	r2, [pc, #404]	@ (8002414 <HAL_GPIO_Init+0x324>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002284:	6453      	str	r3, [r2, #68]	@ 0x44
 8002286:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_GPIO_Init+0x324>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a61      	ldr	r2, [pc, #388]	@ (8002418 <HAL_GPIO_Init+0x328>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a58      	ldr	r2, [pc, #352]	@ (800241c <HAL_GPIO_Init+0x32c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d037      	beq.n	800232e <HAL_GPIO_Init+0x23e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a57      	ldr	r2, [pc, #348]	@ (8002420 <HAL_GPIO_Init+0x330>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d031      	beq.n	800232a <HAL_GPIO_Init+0x23a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a56      	ldr	r2, [pc, #344]	@ (8002424 <HAL_GPIO_Init+0x334>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02b      	beq.n	8002326 <HAL_GPIO_Init+0x236>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a55      	ldr	r2, [pc, #340]	@ (8002428 <HAL_GPIO_Init+0x338>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d025      	beq.n	8002322 <HAL_GPIO_Init+0x232>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a54      	ldr	r2, [pc, #336]	@ (800242c <HAL_GPIO_Init+0x33c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <HAL_GPIO_Init+0x22e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a53      	ldr	r2, [pc, #332]	@ (8002430 <HAL_GPIO_Init+0x340>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d019      	beq.n	800231a <HAL_GPIO_Init+0x22a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a52      	ldr	r2, [pc, #328]	@ (8002434 <HAL_GPIO_Init+0x344>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0x226>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a51      	ldr	r2, [pc, #324]	@ (8002438 <HAL_GPIO_Init+0x348>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_GPIO_Init+0x222>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a50      	ldr	r2, [pc, #320]	@ (800243c <HAL_GPIO_Init+0x34c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x21e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4f      	ldr	r2, [pc, #316]	@ (8002440 <HAL_GPIO_Init+0x350>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_GPIO_Init+0x21a>
 8002306:	2309      	movs	r3, #9
 8002308:	e012      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800230a:	230a      	movs	r3, #10
 800230c:	e010      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800230e:	2308      	movs	r3, #8
 8002310:	e00e      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002312:	2307      	movs	r3, #7
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002316:	2306      	movs	r3, #6
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	@ (8002418 <HAL_GPIO_Init+0x328>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_GPIO_Init+0x354>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a34      	ldr	r2, [pc, #208]	@ (8002444 <HAL_GPIO_Init+0x354>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b32      	ldr	r3, [pc, #200]	@ (8002444 <HAL_GPIO_Init+0x354>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a29      	ldr	r2, [pc, #164]	@ (8002444 <HAL_GPIO_Init+0x354>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a2:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <HAL_GPIO_Init+0x354>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <HAL_GPIO_Init+0x354>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_GPIO_Init+0x354>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_GPIO_Init+0x354>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f ae84 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40021800 	.word	0x40021800
 8002438:	40021c00 	.word	0x40021c00
 800243c:	40022000 	.word	0x40022000
 8002440:	40022400 	.word	0x40022400
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_PWREx_EnableOverDrive+0x90>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <HAL_PWREx_EnableOverDrive+0x90>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	@ 0x40
 8002496:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_PWREx_EnableOverDrive+0x90>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_PWREx_EnableOverDrive+0x94>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a8:	f7fe fbf8 	bl	8000c9c <HAL_GetTick>
 80024ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024ae:	e009      	b.n	80024c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024b0:	f7fe fbf4 	bl	8000c9c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024be:	d901      	bls.n	80024c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e01f      	b.n	8002504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_PWREx_EnableOverDrive+0x98>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d0:	d1ee      	bne.n	80024b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024d2:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7fe fbe0 	bl	8000c9c <HAL_GetTick>
 80024dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024de:	e009      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024e0:	f7fe fbdc 	bl	8000c9c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024ee:	d901      	bls.n	80024f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e007      	b.n	8002504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024f4:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002500:	d1ee      	bne.n	80024e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	420e0040 	.word	0x420e0040
 8002514:	40007000 	.word	0x40007000
 8002518:	420e0044 	.word	0x420e0044

0800251c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e267      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d075      	beq.n	8002626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253a:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d00c      	beq.n	8002560 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002546:	4b85      	ldr	r3, [pc, #532]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800254e:	2b08      	cmp	r3, #8
 8002550:	d112      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002552:	4b82      	ldr	r3, [pc, #520]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800255e:	d10b      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	4b7e      	ldr	r3, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05b      	beq.n	8002624 <HAL_RCC_OscConfig+0x108>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d157      	bne.n	8002624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e242      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x74>
 8002582:	4b76      	ldr	r3, [pc, #472]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x98>
 800259a:	4b70      	ldr	r3, [pc, #448]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6f      	ldr	r2, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6d      	ldr	r3, [pc, #436]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6c      	ldr	r2, [pc, #432]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 80025b4:	4b69      	ldr	r3, [pc, #420]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a68      	ldr	r2, [pc, #416]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a65      	ldr	r2, [pc, #404]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fb62 	bl	8000c9c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fb5e 	bl	8000c9c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e207      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b5b      	ldr	r3, [pc, #364]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xc0>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fb4e 	bl	8000c9c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fb4a 	bl	8000c9c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	@ 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1f3      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	4b51      	ldr	r3, [pc, #324]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0xe8>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002632:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11c      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b44      	ldr	r3, [pc, #272]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d116      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	4b41      	ldr	r3, [pc, #260]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e1c7      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4937      	ldr	r1, [pc, #220]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	e03a      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <HAL_RCC_OscConfig+0x244>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fb03 	bl	8000c9c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe faff 	bl	8000c9c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1a8      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b28      	ldr	r3, [pc, #160]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4925      	ldr	r1, [pc, #148]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ce:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <HAL_RCC_OscConfig+0x244>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fae2 	bl	8000c9c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe fade 	bl	8000c9c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e187      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d036      	beq.n	8002774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_RCC_OscConfig+0x248>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fac2 	bl	8000c9c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe fabe 	bl	8000c9c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e167      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x200>
 800273a:	e01b      	b.n	8002774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273c:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCC_OscConfig+0x248>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7fe faab 	bl	8000c9c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	e00e      	b.n	8002768 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe faa7 	bl	8000c9c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d907      	bls.n	8002768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e150      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b88      	ldr	r3, [pc, #544]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ea      	bne.n	800274a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8097 	beq.w	80028b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b81      	ldr	r3, [pc, #516]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b7d      	ldr	r3, [pc, #500]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a7c      	ldr	r2, [pc, #496]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b7a      	ldr	r3, [pc, #488]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b77      	ldr	r3, [pc, #476]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b74      	ldr	r3, [pc, #464]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a73      	ldr	r2, [pc, #460]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fa67 	bl	8000c9c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe fa63 	bl	8000c9c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e10c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x2ea>
 80027f8:	4b64      	ldr	r3, [pc, #400]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a63      	ldr	r2, [pc, #396]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x30c>
 800280e:	4b5f      	ldr	r3, [pc, #380]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	4a5e      	ldr	r2, [pc, #376]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	@ 0x70
 800281a:	4b5c      	ldr	r3, [pc, #368]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a5b      	ldr	r2, [pc, #364]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002828:	4b58      	ldr	r3, [pc, #352]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a57      	ldr	r2, [pc, #348]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	4b55      	ldr	r3, [pc, #340]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a54      	ldr	r2, [pc, #336]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fa28 	bl	8000c9c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7fe fa24 	bl	8000c9c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0cb      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	4b49      	ldr	r3, [pc, #292]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ee      	beq.n	8002850 <HAL_RCC_OscConfig+0x334>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe fa12 	bl	8000c9c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe fa0e 	bl	8000c9c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0b5      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002892:	4b3e      	ldr	r3, [pc, #248]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ee      	bne.n	800287c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b39      	ldr	r3, [pc, #228]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	4a38      	ldr	r2, [pc, #224]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a1 	beq.w	80029fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ba:	4b34      	ldr	r3, [pc, #208]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d05c      	beq.n	8002980 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d141      	bne.n	8002952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <HAL_RCC_OscConfig+0x478>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe f9e2 	bl	8000c9c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe f9de 	bl	8000c9c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e087      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b27      	ldr	r3, [pc, #156]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	491b      	ldr	r1, [pc, #108]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x478>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe f9b7 	bl	8000c9c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe f9b3 	bl	8000c9c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e05c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x416>
 8002950:	e054      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <HAL_RCC_OscConfig+0x478>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe f9a0 	bl	8000c9c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe f99c 	bl	8000c9c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e045      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x444>
 800297e:	e03d      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e038      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000
 8002994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x4ec>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d028      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d121      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d11a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	3b01      	subs	r3, #1
 80029e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0cc      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b68      	ldr	r3, [pc, #416]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d90c      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b63      	ldr	r3, [pc, #396]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b8      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b59      	ldr	r3, [pc, #356]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a58      	ldr	r2, [pc, #352]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a78:	4b53      	ldr	r3, [pc, #332]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b50      	ldr	r3, [pc, #320]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	494d      	ldr	r1, [pc, #308]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d044      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b47      	ldr	r3, [pc, #284]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d119      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e07f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e067      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b37      	ldr	r3, [pc, #220]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4934      	ldr	r1, [pc, #208]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe f8ce 	bl	8000c9c <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe f8ca 	bl	8000c9c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e04f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b25      	ldr	r3, [pc, #148]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d20c      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e032      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4916      	ldr	r1, [pc, #88]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	490e      	ldr	r1, [pc, #56]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b92:	f000 f821 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	490a      	ldr	r1, [pc, #40]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	4a09      	ldr	r2, [pc, #36]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe f82e 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023c00 	.word	0x40023c00
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08002dd4 	.word	0x08002dd4
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b090      	sub	sp, #64	@ 0x40
 8002bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf0:	4b59      	ldr	r3, [pc, #356]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d00d      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	f200 80a1 	bhi.w	8002d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0a:	e09b      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b53      	ldr	r3, [pc, #332]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c10:	e09b      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b53      	ldr	r3, [pc, #332]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c16:	e098      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c18:	4b4f      	ldr	r3, [pc, #316]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c22:	4b4d      	ldr	r3, [pc, #308]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c40:	2100      	movs	r1, #0
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c44:	fb03 f201 	mul.w	r2, r3, r1
 8002c48:	2300      	movs	r3, #0
 8002c4a:	fb00 f303 	mul.w	r3, r0, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a43      	ldr	r2, [pc, #268]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c52:	fba0 1202 	umull	r1, r2, r0, r2
 8002c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c58:	460a      	mov	r2, r1
 8002c5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c5e:	4413      	add	r3, r2
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	2200      	movs	r2, #0
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	61fa      	str	r2, [r7, #28]
 8002c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c72:	f7fd fabb 	bl	80001ec <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7e:	e053      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c80:	4b35      	ldr	r3, [pc, #212]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	2200      	movs	r2, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	617a      	str	r2, [r7, #20]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c92:	f04f 0b00 	mov.w	fp, #0
 8002c96:	4652      	mov	r2, sl
 8002c98:	465b      	mov	r3, fp
 8002c9a:	f04f 0000 	mov.w	r0, #0
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	0159      	lsls	r1, r3, #5
 8002ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca8:	0150      	lsls	r0, r2, #5
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	ebb2 080a 	subs.w	r8, r2, sl
 8002cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cca:	ebb2 0408 	subs.w	r4, r2, r8
 8002cce:	eb63 0509 	sbc.w	r5, r3, r9
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	00eb      	lsls	r3, r5, #3
 8002cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce0:	00e2      	lsls	r2, r4, #3
 8002ce2:	4614      	mov	r4, r2
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	eb14 030a 	adds.w	r3, r4, sl
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	eb45 030b 	adc.w	r3, r5, fp
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	028b      	lsls	r3, r1, #10
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d08:	4621      	mov	r1, r4
 8002d0a:	028a      	lsls	r2, r1, #10
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	2200      	movs	r2, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	60fa      	str	r2, [r7, #12]
 8002d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d1c:	f7fd fa66 	bl	80001ec <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d42:	e002      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3740      	adds	r7, #64	@ 0x40
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	017d7840 	.word	0x017d7840

08002d64 <memset>:
 8002d64:	4402      	add	r2, r0
 8002d66:	4603      	mov	r3, r0
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <memset+0xa>
 8002d6c:	4770      	bx	lr
 8002d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d72:	e7f9      	b.n	8002d68 <memset+0x4>

08002d74 <__libc_init_array>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	4d0d      	ldr	r5, [pc, #52]	@ (8002dac <__libc_init_array+0x38>)
 8002d78:	4c0d      	ldr	r4, [pc, #52]	@ (8002db0 <__libc_init_array+0x3c>)
 8002d7a:	1b64      	subs	r4, r4, r5
 8002d7c:	10a4      	asrs	r4, r4, #2
 8002d7e:	2600      	movs	r6, #0
 8002d80:	42a6      	cmp	r6, r4
 8002d82:	d109      	bne.n	8002d98 <__libc_init_array+0x24>
 8002d84:	4d0b      	ldr	r5, [pc, #44]	@ (8002db4 <__libc_init_array+0x40>)
 8002d86:	4c0c      	ldr	r4, [pc, #48]	@ (8002db8 <__libc_init_array+0x44>)
 8002d88:	f000 f818 	bl	8002dbc <_init>
 8002d8c:	1b64      	subs	r4, r4, r5
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	2600      	movs	r6, #0
 8002d92:	42a6      	cmp	r6, r4
 8002d94:	d105      	bne.n	8002da2 <__libc_init_array+0x2e>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9c:	4798      	blx	r3
 8002d9e:	3601      	adds	r6, #1
 8002da0:	e7ee      	b.n	8002d80 <__libc_init_array+0xc>
 8002da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da6:	4798      	blx	r3
 8002da8:	3601      	adds	r6, #1
 8002daa:	e7f2      	b.n	8002d92 <__libc_init_array+0x1e>
 8002dac:	08002df4 	.word	0x08002df4
 8002db0:	08002df4 	.word	0x08002df4
 8002db4:	08002df4 	.word	0x08002df4
 8002db8:	08002df8 	.word	0x08002df8

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
